What is a rebase in Git? 

In Git, the rebase command integrates changes from one branch into another. It is an alternative to the better known "merge" command. 

Most visibly, rebase differs from merge by rewriting the commit history in order to produce a straight, linear succession of commits. 

Lificycle of the status of a file 

-------------------------------------- 
Staging modified files 

-------------------------------- 

vim CONTRIBUTING.md 

$ git status 

On branch master 

Your branch is up-to-date with 'origin/master'. 

Changes to be committed: 

(use "git reset HEAD <file>..." to unstage) 

new file: README 

modified: CONTRIBUTING.md 

Changes not staged for commit: 

(use "git add <file>..." to update what will be committed) 

(use "git checkout -- <file>..." to discard changes in working directory) 

modified: CONTRIBUTING.md 

 Now CONTRIBUTING.md is listed as both staged and unstaged. How is that possible? It 

turns out that Git stages a file exactly as it is when you run the git add command. If you commit 

now, the version of CONTRIBUTING.md as it was when you last ran the git add command is how it will 

go into the commit, not the version of the file as it looks in your working directory when you run 

git commit. If you modify a file after you run git add, you have to run git add again to stage the 

latest version of the file 

 Git status -s 

----------------- 

 

?? --> untracked files 

M --> Modified files 

A --> Added to staging 

 Ignoring Files 

0---------------- 

Make entry in .gitignore file. ---> those files don't show as untracked files and won't be add into staging automatically 

 # ignore all .a files 

*.a 

# but do track lib.a, even though you're ignoring .a files above 

!lib.a 

# only ignore the TODO file in the current directory, not subdir/TODO 

/TODO 

# ignore all files in any directory named build 

build/ 

# ignore doc/notes.txt, but not doc/server/arch.txt 

doc/*.txt 

# ignore all .pdf files in the doc/ directory and any of its subdirectories 

doc/**/*.pdf 

 #git diff command 
To see what you’ve changed but not yet staged, type git diff with no other arguments 

------------------------ 
command compares what is in your working directory with what is in your staging area. The result tells you the changes you’ve made
that you haven’t yet staged. 

 If you want to see what you’ve staged that will go into your next commit, you can use git diff  --staged. This command compares 
your staged changes to your last commit 
